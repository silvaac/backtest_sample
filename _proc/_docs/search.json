[
  {
    "objectID": "data.yahoo.html",
    "href": "data.yahoo.html",
    "title": "Yahoo data download",
    "section": "",
    "text": "Simple code that downloads data from yahoo finance to illustrate backtest. Normally the data should be stored in a database or in an infrastructure that allows for ETL to be controled by custom code. Notice that ticker is probably not the best unique ID … Again, this is a demo to get free data.\nsource"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "foo\n\n foo ()"
  },
  {
    "objectID": "data.mysql.html",
    "href": "data.mysql.html",
    "title": "Mysql data pull",
    "section": "",
    "text": "This is a sample code that does not work!!! My goal here is to illustrate how a possible interface would look like….\n\nsource\n\nmysql\n\n mysql (ticker, start_date='1900-01-01')\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "backtest_sample",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "backtest_sample",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall backtest_sample in Development mode\n# make sure backtest_sample package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to backtest_sample\n$ nbdev_prepare"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "backtest_sample",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/silvaac/backtest_sample.git\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "backtest_sample",
    "section": "How to use",
    "text": "How to use\n\nGet data\nYou can only get data from yahoo finance at the moment.\n\nimport_module = get_data()\ndf = import_module('BTC-USD').sim_data()\nprint(df)\n\n[*********************100%***********************]  1 of 1 completed\n\n\n                    Open          High  ...     Adj Close       Volume\nDate                                    ...                           \n2014-09-17    465.864014    468.174011  ...    457.334015     21056800\n2014-09-18    456.859985    456.859985  ...    424.440002     34483200\n2014-09-19    424.102997    427.834991  ...    394.795990     37919700\n2014-09-20    394.673004    423.295990  ...    408.903992     36863600\n2014-09-21    408.084991    412.425995  ...    398.821014     26580100\n...                  ...           ...  ...           ...          ...\n2024-09-13  58130.324219  60648.023438  ...  60571.300781  32490528356\n2024-09-14  60569.117188  60656.722656  ...  60005.121094  16428405496\n2024-09-15  60000.726562  60381.917969  ...  59182.835938  18120960867\n2024-09-16  59185.226562  59205.511719  ...  58192.507812  32032822113\n2024-09-17  58204.093750  61189.992188  ...  61189.992188  32679829504\n\n[3654 rows x 6 columns]\n                    Open          High  ...     Adj Close       Volume\nDate                                    ...                           \n2014-09-17    465.864014    468.174011  ...    457.334015     21056800\n2014-09-18    456.859985    456.859985  ...    424.440002     34483200\n2014-09-19    424.102997    427.834991  ...    394.795990     37919700\n2014-09-20    394.673004    423.295990  ...    408.903992     36863600\n2014-09-21    408.084991    412.425995  ...    398.821014     26580100\n...                  ...           ...  ...           ...          ...\n2024-09-13  58130.324219  60648.023438  ...  60571.300781  32490528356\n2024-09-14  60569.117188  60656.722656  ...  60005.121094  16428405496\n2024-09-15  60000.726562  60381.917969  ...  59182.835938  18120960867\n2024-09-16  59185.226562  59205.511719  ...  58192.507812  32032822113\n2024-09-17  58204.093750  61189.992188  ...  61189.992188  32679829504\n\n[3654 rows x 6 columns]\n\n\n\n\nParameters\nSelect the parameters of the backtest and the model.\n\n# parameters\nprm = {}\n## General parameters\nprm['when_trade'] = 'open' # when to trade\nprm['start_date'] = 100    # how many periods (days here) to skip before trading\n## ER model\nprm['er_member_func'] = get_er() # Select the model class\n# ER model parameters (see model for detail)\nprm['mawin'] = 10\nprm['sdwin'] = 30\n## Risk model\nprm['risk_member_func'] = get_risk() # Select the model class\n# Risk model parameter (see model for detail)\nprm['wvol']  = 60\n## PM allocation model\nprm['pm_member_func'] = get_pm() # Select the model class\n# PM parameters (see model for detail)\nprm['target_vol'] = 0.005 # target volatility per backtesting step (daily here)\nprm['AUM'] = 10e6  # Investment capital in the currency of the data ($ here)\n## TC model parameters\nprm['tc_member_func'] = get_tc() # Select the model class\n# TC parameters (see model for detail)\nprm['tc_slope'] = 1e3\nprm['tc_bias'] = 100\n\n\n\nRun the backtest\nPass the parameters and the data. Output is a dataframe with col:\n\ntrade: number of shares/contracts to be bought (&gt;0) or sold (&lt;0)\nposition: this is the target position for the next time period (here day)\ner: expected return for the next time interval (here day)\nvol: expected volatility for the next time interval (here day)\npnl0: profit or loss for the time interval without TC (here day)\npnl: profit or loss for the time interval including TC (here day)\n\n\nbkt = backtest(df,prm)\nprint(bkt.tail())\n\n            trade  position      er     vol         pnl0          pnl\n2024-09-13     -2        -2 -0.0673  0.0307     0.000000  -100.264222\n2024-09-14      8         6  0.2064  0.0300 -4881.953125 -4982.128923\n2024-09-15     -2         4  0.1360  0.0300 -3379.609375 -3480.283094\n2024-09-16      2         6  0.2066  0.0300 -3297.929688 -3398.099201\n2024-09-17      2         8  0.2926  0.0301 -5946.750000 -6046.919490\n            trade  position      er     vol         pnl0          pnl\n2024-09-13     -2        -2 -0.0673  0.0307     0.000000  -100.264222\n2024-09-14      8         6  0.2064  0.0300 -4881.953125 -4982.128923\n2024-09-15     -2         4  0.1360  0.0300 -3379.609375 -3480.283094\n2024-09-16      2         6  0.2066  0.0300 -3297.929688 -3398.099201\n2024-09-17      2         8  0.2926  0.0301 -5946.750000 -6046.919490\n\n\nSample plot of the data:\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Plot the data\nplt.plot(bkt['pnl'].cumsum())\n\n# Add labels and title\nplt.xlabel('')\nplt.ylabel('$')\nplt.title('Performance')\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "tc.simple.html",
    "href": "tc.simple.html",
    "title": "First TC model",
    "section": "",
    "text": "Sample TC model with a trade inpact model that is linear with the size of the number of shares/contracts. Denominator is the median traling volume and the numberator is the trade size. This model has not been calibrated and should not be assumed correct.\nsource"
  },
  {
    "objectID": "tc.simple.html#example",
    "href": "tc.simple.html#example",
    "title": "First TC model",
    "section": "Example",
    "text": "Example\n\n# Get data\nfrom backtest_sample.data_interface import get_data\nimport_module = get_data()\ndf = import_module('BTC-USD').sim_data()\n\n[*********************100%***********************]  1 of 1 completed\n\n\n\n# TC in the begging\nprm = {}\nprm['tc_slope'] = 1e3\nprm['tc_bias'] = 100\ntc = simple(df.values[:100,:],prm)\nprint(tc.TC(1000))\n\n{'TC': 813.5629449701777}\n{'TC': 813.5629449701777}\n\n\n\n# TC in the end\nprm = {}\nprm['tc_slope'] = 1e3\nprm['tc_bias'] = 100\ntc = simple(df.values[-100:,:],prm)\nprint(tc.TC(300))\n\n{'TC': 121.56343535951316}\n{'TC': 121.56343535951316}"
  },
  {
    "objectID": "pm.vol_target.html",
    "href": "pm.vol_target.html",
    "title": "Portfolio mananger",
    "section": "",
    "text": "Like a “human” portfolio mananger the job of this code is to take in predictions and output target positions. This particular PM allocates using vanilla volatility targeting ideas.\nsource"
  },
  {
    "objectID": "pm.vol_target.html#example",
    "href": "pm.vol_target.html#example",
    "title": "Portfolio mananger",
    "section": "Example",
    "text": "Example\n\n# Get data\nfrom backtest_sample.data_interface import get_data\nimport_module = get_data()\ndf = import_module('BTC-USD').sim_data()\n\n[*********************100%***********************]  1 of 1 completed\n\n\n\nprm = {}\nprm['target_vol'] = 0.005\nprm['AUM'] = 10e6\nvt = vol_target(df.values,prm).allocation(1,0.04)\nprint(vt)\n\n{'N': 20}\n{'N': 20}"
  },
  {
    "objectID": "er.ma_model.html",
    "href": "er.ma_model.html",
    "title": "Moving average model",
    "section": "",
    "text": "To illustrate a backtesting algorithm, a simple prediction algorithm is presented. Aside from the simplicity of the prediction algorithm, it’s assumed that predictions are made at the same frequency as the input data.\nTo create an expected return (ER) model (forecasting model), data and the exact data format are required. Here, both data and param are assumed to be dictionaries, facilitating the development of complex algorithms that require various data items.\nThe convention is that any ER will accept data and a param, and will consistently generate an output dictionary with a “yHat” element and possibly others that can be utilized in more complex algorithms (e.g., when creating allocation or risk).\nsource"
  },
  {
    "objectID": "er.ma_model.html#example",
    "href": "er.ma_model.html#example",
    "title": "Moving average model",
    "section": "Example",
    "text": "Example\n\n# Get data\nfrom backtest_sample.data_interface import get_data\nimport_module = get_data()\ndf = import_module('BTC-USD').sim_data()\n# Forecast\nprm = {}\nprm['mawin'] = 10\nprm['sdwin'] = 30\nyHat = ma_model(df.values,prm)\nprint(yHat.y_hat())\n\n[*********************100%***********************]  1 of 1 completed\n\n\n{'y_hat': 0.4312}\n{'y_hat': 0.4312}"
  },
  {
    "objectID": "data.yahoo.html#example",
    "href": "data.yahoo.html#example",
    "title": "Yahoo data download",
    "section": "Example",
    "text": "Example\n\nfrom backtest_sample.data.yahoo import yahoo\n\nyahoo('SPY').raw_data()\n\n[*********************100%***********************]  1 of 1 completed\n\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nAdj Close\nVolume\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n1993-01-29\n43.968750\n43.968750\n43.750000\n43.937500\n24.684105\n1003200\n\n\n1993-02-01\n43.968750\n44.250000\n43.968750\n44.250000\n24.859669\n480500\n\n\n1993-02-02\n44.218750\n44.375000\n44.125000\n44.343750\n24.912336\n201300\n\n\n1993-02-03\n44.406250\n44.843750\n44.375000\n44.812500\n25.175676\n529400\n\n\n1993-02-04\n44.968750\n45.093750\n44.468750\n45.000000\n25.281004\n531500\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n2024-09-09\n544.650024\n547.710022\n542.679993\n546.409973\n546.409973\n40445800\n\n\n2024-09-10\n548.359985\n549.150024\n543.380005\n548.789978\n548.789978\n36394600\n\n\n2024-09-11\n548.700012\n555.359985\n539.960022\n554.419983\n554.419983\n75248600\n\n\n2024-09-12\n555.010010\n559.400024\n552.739990\n559.090027\n559.090027\n51892700\n\n\n2024-09-13\n559.710022\n563.030029\n559.450012\n562.010010\n562.010010\n39256500\n\n\n\n\n7963 rows × 6 columns\n\n\n\n\nyahoo('SPY').sim_data()\n\n[*********************100%***********************]  1 of 1 completed\n\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nAdj Close\nVolume\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n1993-01-29\n24.701665\n24.701665\n24.578771\n43.937500\n24.684109\n1785687\n\n\n1993-02-01\n24.701664\n24.859671\n24.701664\n44.250000\n24.859671\n855285\n\n\n1993-02-02\n24.842106\n24.929887\n24.789437\n44.343750\n24.912331\n358312\n\n\n1993-02-03\n24.947454\n25.193242\n24.929898\n44.812500\n25.175686\n942327\n\n\n1993-02-04\n25.263448\n25.333673\n24.982548\n45.000000\n25.281004\n946066\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n2024-09-09\n544.650024\n547.710022\n542.679993\n546.409973\n546.409973\n40445800\n\n\n2024-09-10\n548.359985\n549.150024\n543.380005\n548.789978\n548.789978\n36394600\n\n\n2024-09-11\n548.700012\n555.359985\n539.960022\n554.419983\n554.419983\n75248600\n\n\n2024-09-12\n555.010010\n559.400024\n552.739990\n559.090027\n559.090027\n51892700\n\n\n2024-09-13\n559.710022\n563.030029\n559.450012\n562.010010\n562.010010\n39256500\n\n\n\n\n7963 rows × 6 columns"
  },
  {
    "objectID": "backtest_loop.html",
    "href": "backtest_loop.html",
    "title": "Example",
    "section": "",
    "text": "source\n\nbacktest\n\n backtest (data, param)\n\n\nprm = {}\nprm['when_trade'] = 'open'\nprm['start_date'] = 100\nprm['mawin'] = 10\nprm['sdwin'] = 30\nprm['wvol']  = 60\nprm['target_vol'] = 0.005\nprm['AUM'] = 10e6\nprm['tc_slope'] = 1e3\nprm['tc_bias'] = 100\nprm['er_member_func'] = get_er()\nprm['risk_member_func'] = get_risk()\nprm['tc_member_func'] = get_tc()\nprm['pm_member_func'] = get_pm()\n\n\nimport_module = get_data()\ndf = import_module('BTC-USD').sim_data()\nprint(df)\n\n[*********************100%***********************]  1 of 1 completed\n\n\n                    Open          High  ...     Adj Close       Volume\nDate                                    ...                           \n2014-09-17    465.864014    468.174011  ...    457.334015     21056800\n2014-09-18    456.859985    456.859985  ...    424.440002     34483200\n2014-09-19    424.102997    427.834991  ...    394.795990     37919700\n2014-09-20    394.673004    423.295990  ...    408.903992     36863600\n2014-09-21    408.084991    412.425995  ...    398.821014     26580100\n...                  ...           ...  ...           ...          ...\n2024-09-13  58130.324219  60648.023438  ...  60571.300781  32490528356\n2024-09-14  60569.117188  60656.722656  ...  60005.121094  16428405496\n2024-09-15  60000.726562  60381.917969  ...  59182.835938  18120960867\n2024-09-16  59185.226562  59205.511719  ...  58192.507812  32032822113\n2024-09-17  58204.093750  61207.335938  ...  61207.335938  32345808896\n\n[3654 rows x 6 columns]\n                    Open          High  ...     Adj Close       Volume\nDate                                    ...                           \n2014-09-17    465.864014    468.174011  ...    457.334015     21056800\n2014-09-18    456.859985    456.859985  ...    424.440002     34483200\n2014-09-19    424.102997    427.834991  ...    394.795990     37919700\n2014-09-20    394.673004    423.295990  ...    408.903992     36863600\n2014-09-21    408.084991    412.425995  ...    398.821014     26580100\n...                  ...           ...  ...           ...          ...\n2024-09-13  58130.324219  60648.023438  ...  60571.300781  32490528356\n2024-09-14  60569.117188  60656.722656  ...  60005.121094  16428405496\n2024-09-15  60000.726562  60381.917969  ...  59182.835938  18120960867\n2024-09-16  59185.226562  59205.511719  ...  58192.507812  32032822113\n2024-09-17  58204.093750  61207.335938  ...  61207.335938  32345808896\n\n[3654 rows x 6 columns]\n\n\n\nbkt = backtest(df,prm)\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Plot the data\nplt.plot(bkt['pnl'].cumsum())\n\n# Add labels and title\nplt.xlabel('')\nplt.ylabel('$')\nplt.title('Performance')\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nRun parameters optimization\nIn series using a simple for loop:\n\nbkts = []\nfor i in range(0,40,2):\n    prm['mawin'] = 10*(i+1)\n    #print(prm['mawin'])\n    bkt = backtest(df,prm)\n    bkts.append(bkt)\n\nIn parallel using multiprocessing:\n\n@parfor(range(0,40,2)) # also works:[0,2,10,20]\ndef fun(i):\n    prm['mawin'] = 10*(i+1)\n    return backtest(df,prm)\n\n  0%|                                                   | 0/20 [00:00&lt;?, ?it/s]  5%|██▏                                        | 1/20 [00:03&lt;01:10,  3.73s/it] 25%|██████████▊                                | 5/20 [00:03&lt;00:08,  1.73it/s] 45%|███████████████████▎                       | 9/20 [00:05&lt;00:05,  1.99it/s] 70%|█████████████████████████████▍            | 14/20 [00:05&lt;00:01,  3.79it/s] 85%|███████████████████████████████████▋      | 17/20 [00:06&lt;00:00,  3.36it/s]100%|██████████████████████████████████████████| 20/20 [00:06&lt;00:00,  2.89it/s]"
  },
  {
    "objectID": "data_interface.html",
    "href": "data_interface.html",
    "title": "Main data interface",
    "section": "",
    "text": "Idea is collect the different interface into one place. If one wants to code one more interface, one just needs to add code to “data” folder.\nsource"
  },
  {
    "objectID": "data_interface.html#example",
    "href": "data_interface.html#example",
    "title": "Main data interface",
    "section": "Example",
    "text": "Example\n\nfrom backtest_sample.data_interface import get_data\nimport_module = get_data()\ndf = import_module('BTC-USD').sim_data()\nprint(df)\n\n[*********************100%***********************]  1 of 1 completed\n\n\n                    Open          High  ...     Adj Close       Volume\nDate                                    ...                           \n2014-09-17    465.864014    468.174011  ...    457.334015     21056800\n2014-09-18    456.859985    456.859985  ...    424.440002     34483200\n2014-09-19    424.102997    427.834991  ...    394.795990     37919700\n2014-09-20    394.673004    423.295990  ...    408.903992     36863600\n2014-09-21    408.084991    412.425995  ...    398.821014     26580100\n...                  ...           ...  ...           ...          ...\n2024-09-13  58130.324219  60648.023438  ...  60571.300781  32490528356\n2024-09-14  60569.117188  60656.722656  ...  60005.121094  16428405496\n2024-09-15  60000.726562  60381.917969  ...  59182.835938  18120960867\n2024-09-16  59185.226562  59205.511719  ...  58192.507812  32032822113\n2024-09-17  58204.093750  61207.335938  ...  61207.335938  32345808896\n\n[3654 rows x 6 columns]\n                    Open          High  ...     Adj Close       Volume\nDate                                    ...                           \n2014-09-17    465.864014    468.174011  ...    457.334015     21056800\n2014-09-18    456.859985    456.859985  ...    424.440002     34483200\n2014-09-19    424.102997    427.834991  ...    394.795990     37919700\n2014-09-20    394.673004    423.295990  ...    408.903992     36863600\n2014-09-21    408.084991    412.425995  ...    398.821014     26580100\n...                  ...           ...  ...           ...          ...\n2024-09-13  58130.324219  60648.023438  ...  60571.300781  32490528356\n2024-09-14  60569.117188  60656.722656  ...  60005.121094  16428405496\n2024-09-15  60000.726562  60381.917969  ...  59182.835938  18120960867\n2024-09-16  59185.226562  59205.511719  ...  58192.507812  32032822113\n2024-09-17  58204.093750  61207.335938  ...  61207.335938  32345808896\n\n[3654 rows x 6 columns]\n\n\n\ner = get_er()\nprm = {}\nprm['mawin'] = 10\nprm['sdwin'] = 30\nyHat = er(df.values,prm)\nprint(yHat.y_hat())\n\n{'y_hat': 0.4319}\n{'y_hat': 0.4319}\n\n\n\nrisk = get_risk()\nprm = {}\nprm['wvol'] = 60\nriskHat = risk(df.values,prm)\nprint(riskHat.risk_hat())\n\n{'vol_hat': 0.0303}\n{'vol_hat': 0.0303}\n\n\n\ntTc = get_tc()\nprm = {}\nprm['tc_slope'] = 1e3\nprm['tc_bias'] = 100\ntc = tTc(df.values,prm)\nprint(tc.TC(100))\n\n{'TC': 107.18781178650438}{'TC': 107.18781178650438}\n\n\n\n\n\nprm = {}\nprm['target_vol'] = 0.005\nprm['AUM'] = 10e6\na = get_pm()\nvt = a(df.values,prm).allocation(1,0.04)\nprint(vt)\n\n{'N': 20}{'N': 20}"
  },
  {
    "objectID": "risk.sig_model.html",
    "href": "risk.sig_model.html",
    "title": "Volatility forecast",
    "section": "",
    "text": "Returns the volatility of the asset to be traded\nsource"
  },
  {
    "objectID": "risk.sig_model.html#example",
    "href": "risk.sig_model.html#example",
    "title": "Volatility forecast",
    "section": "Example",
    "text": "Example\n\n# Get data\nfrom backtest_sample.data_interface import get_data\nimport_module = get_data()\ndf = import_module('BTC-USD').sim_data()\n# Forecast\nprm = {}\nprm['wvol'] = 60\nriskHat = sig_model(df.values,prm)\nprint(riskHat.risk_hat())\n\n[*********************100%***********************]  1 of 1 completed\n\n\n{'vol_hat': 0.0438}\n{'vol_hat': 0.0438}"
  }
]